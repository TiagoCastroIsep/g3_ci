@startuml
!theme toy

package values{
 interface Value {
 toString() : String
 setValue (measured : String) : boolean
 getMeasurementUnit() : String
 }
  interface ValueFactory{
  createRangeActuatorInt (lowerLimit : int, upperLimit : int) : Value
  createRangeActuatorFractional (lowerLimit : double, upperLimit : double) : Value
  createWValue () : WValue
  createPercentage () : PercentageValue
  createCelsiusTemperature () : CelsiusTemperatureValue
  createWhvalue () : WhValue
  createKmhCardinalValue () : KmhCardinalValue
  createWm2Value () : Wm2Value
  }
}
package sensors{
class SensorRepository{
- _repositorySensors : List<String>;
- _sensorPath : String;
+ SensorRepository ( config : Configuration)
+ SensorRepository  (fileName : String)
- isValidArgument (config : Configuration) : boolean
- isValidArgument (fileName : String) : boolean
+ getSensorPath () : String
+ findAllSensors() : List<String>
+ getSensorModel (sensorModel : SensorModel) : String
}
class SensorFactory{
- _sensorRepository : SensorRepository;
- _deviceRepository : DeviceRepository;
+ SensorFactory (sensorRepository : SensorRepository)
+ addSensor (deviceName: DeviceName, sensorModel : SensorModel, name : SensorName, valueFactory : ValueFactory) : Sensor
}
enum SensorFunctionality{
    Temperature,
    Humidity,
    Binary_Switch,
    Percentage,
    Wind,
    DewPoint,
    Power_Consumption,
    SolarIrradiance,
    Energy_Consumption,
    Sunrise,
    Sunset,
 }

 interface Sensor <root> {
 getName() : String
 getSensorFunctionality () : SensorFunctionality
 }
entity TemperatureSensor{
- _name : SensorName;
- _deviceID : DeviceName;
- _sensorFunctionality : SensorFunctionality;
- _currentValue : Value;
- _valueFactory : ValueFactory;
 ...
}
}
package valueObject{
class SensorName<VO>{
- _name : String;
+ SensorName (name : String)
+ toString() : String
+ equals (obj : Object) : boolean
}
class SensorModel<VO>{
- _model : String;
+ SensorModel (model : String)
+ toString() : String
+ equals (obj : Object) : boolean
}
class DeviceName <VO>{
}
}
class DeviceRepository{
...
+ deviceExists (deviceName : String) : boolean
}





SensorRepository "1" --> "1" SensorFactory
SensorFactory "1" ..> "N" Sensor : uses
Sensor "1" --> "1" SensorFunctionality : uses
SensorFactory "1" --> "1" SensorName
SensorFactory "1" --> "1" SensorModel
SensorRepository "1" --> "1" SensorModel
SensorFactory "1" .left.> "1" DeviceRepository : uses
SensorFactory "1" --> "1" DeviceName : uses
TemperatureSensor "1" ..> "1" Sensor : implements
SensorFactory "1" --> "1" TemperatureSensor : creates
TemperatureSensor "1" ..> "1" ValueFactory : uses


ValueFactory "1" ..> "1" Value : "uses"



@enduml