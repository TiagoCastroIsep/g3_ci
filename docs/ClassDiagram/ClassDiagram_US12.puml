@startuml
!theme toy

package controller {
class Ctrl12 {
- _house : House
- _roomsDTOandRooms : Map<String, RoomDTO>
- _devicesDTOandDevices : Map<String, DeviceDTO>
+ getDevicesInRoom(roomDTO : RoomDTO) : List<DeviceDTO>
+ getActuatorFunctionalities(deviceDTO : DeviceDTO) : List<ActuatorFunctionality>
+ addActuatorToDevice(deviceDTO : DeviceDTO,actuatorModel : String, name : String) : boolean
}
}
package domain{
package house{
class House {
    - _location: Location
    - _locationFactory: LocationFactory
    - _roomFactory; RoomFactory
    + House(locationFactory: LocationFactory, roomFactory: RoomFactory)
    + configureLocation(street: String, doorNumber: String, \nzip: String, city: String,country: String, \nlatitude: double, longitude: double): Location
    + getLocation(): Location
    + addRoom(name: String, houseFloor: String, \nheight: double, width: double, \ndeviceFactory : DeviceFactory, \ndimensionsFactory: DimensionsFactory): boolean
    - roomExists(name: String): boolean
    + getRooms(): List<Room>
    + getRoom(name: String): Room
    + getDevicesByRoomAndFunctionality( devicesByFunctionality:\nDevicesByFunctionality): Map <String, List<DeviceRoomDTO>>
    + toString(): String
}
}
package room{
class Room {
    - _name: String
    - _houseFloor: String
    - _dimensions: Dimensions
    - _devices: List<Device>
    - _deviceFactory: DeviceFactory
    - _dimensionsFactory: DimensionsFactory
    + Room(name: String, houseFloor: String, \nheight: double, width: double, \ndeviceFactory: DeviceFactory, \ndimensionsFactory: DimensionsFactory): Room
    - validateArguments(name: String, houseFloor: String): boolean
    + getName(): String
    + getFloor(): String
    + getDimensions(): Dimensions
    + addDevice(name: String, model: String): boolean
    - deviceExists(name: String): boolean
    + getDevice(name: String): Device
    + getDevices(): List<Device>
    + toString(): String
}
}
package device{
class Device {
- _name : String;
- _deviceModel : String;
- _sensors : List<Sensor>;
- _actuators : List<Actuator>;
- _isActive : boolean
- _actuatorCatalogue : ActuatorCatalogue
- _sensorCatalogue : SensorCatalogue
+ Device (name : String, deviceModel : String, repository : Repository) : Device
- validateArguments(name: String, deviceModel: String): boolean
+ switchDevice (isActive : boolean) : boolean
+ getName() : String
+ getIsActive() : boolean
+ getDeviceModel() : String
+ getSensor (sensorModel : String) : Sensor
+ getActuator (actuatorModel : String) : Actuator
+ addSensor (strModel : String, name : String, \nsensorCatalogue SensorCatalogue, valueFactory : ValueFactory) : Sensor
+ addActuator (strModel : String, name : String, \nactuatorCatalogue ActuatorCatalogue, valueFactory : ValueFactory) : Actuator
+ getSensors() : List<Sensor>
+ getActuators() : List<Actuator>
# sensorExists (name : String) : boolean
# actuatorExists (name : String) : boolean
+ getSensorFunctionalities() : List<SensorFunctionality>
+ getActuatorFunctionalities() : List<ActuatorFunctionality>
}
}
package values{
 interface Value {
 toString() : String
 setValue (measured : String) : boolean
 getMeasurementUnit() : String
 }
  interface ValueFactory{
  createRangeActuatorInt (lowerLimit : int, upperLimit : int) : Value
  createRangeActuatorFractional (lowerLimit : double, upperLimit : double) : Value
  createWValue () : WValue
  createPercentage () : PercentageValue
  createCelsiusTemperature () : CelsiusTemperatureValue
  createWhvalue () : WhValue
  createKmhCardinalValue () : KmhCardinalValue
  createWm2Value () : Wm2Value
  }
}
package actuators{
class ActuatorCatalogue{
- _catalogueActuators : List<String>;
- _actuatorFunctionalities : List<ActuatorFunctionality>
+ ActuatorCatalogue ( config : Configuration)
+ ActuatorCatalogue (fileName : String)
- isValidConstructorArguments (config : Configuration) : boolean
- isValidConstructorArguments (fileName : String) : boolean
+ getActuatorModels() : List<ActuatorFunctionality>
+ getActuators() : List<String>
+ getActuatorFunctionality (functionality : ActuatorFunctionality) : ActuatorFunctionality
+ getActuator (actuatorModel : String, actuatorPath: String, name : String, valueFactory: ValueFactory) : Actuator
}

enum ActuatorFunctionality{
    On_Off
    Range
    BlindRoller
 }
  interface Actuator {
  getName() : String
  getActuatorFunctionality () : ActuatorFunctionality
  }
  }
}
package dto{
class RoomDTO{
+ name : String
+ floor : String
+ height : double
+ width : double
+ RoomDTO ( room : Room, dimensions : Dimensions) : RoomDTO
+ toString() : String
}

class DeviceDTO{
+ name : String
+ deviceModel : String
+ (isActive : boolean)
+ DeviceDTO (device : Device) : DeviceDTO
}

class RoomMapper{
+ Domain2DTO (room: Room) : RoomDTO
+ Domain2DTO (rooms: List<Room>) : Map<RoomDTO, room>
}

class DeviceMapper{
+ Domain2DTO (device: Device) : DeviceDTO
+ Domain2DTO (devices: List<Device>) : Map<DeviceDTO, device>
}
}

Ctrl12 "1" ..> "1" House : "uses"
Ctrl12 "1" ..> "1" RoomDTO : "uses"
RoomMapper "1" ..> "1" RoomDTO : "uses"
Ctrl12 "1" ..> "1" DeviceDTO : "uses"
DeviceMapper "1" ..> "1" DeviceDTO : "uses"
Ctrl12 "1" ..> "1" RoomMapper : "uses"
RoomMapper "1" ..> "1" Room : "uses"
House "1" *-right- "1" Room :"has"
Ctrl12 "1"  ..> "1" DeviceMapper: "uses"
DeviceMapper "1" ..> "1" Device: "uses"
Device "1" *-right-"1" ActuatorCatalogue : "has"
ActuatorCatalogue "1" ..> "1" ActuatorFunctionality : "has"
ActuatorCatalogue "1" ..> "1" ValueFactory : "uses"
ValueFactory "1" ..> "1" Value : "uses"
Device "1" *-right-"1" Actuator : "has"
Room "1"  *-right-  "1" Device: "has"


@enduml