@startuml

left to right direction

interface Sensor {
 + getName(): String
 + getSensorFunctionality(): SensorFunctionality
}

class AveragePowerConsumptionSensor {
- _name: String
- _sensorFunctionality: SensorFunctionality
- _data: Map<LocalTime, WValue>
+ AveragePowerConsumptionSensor(catalogue: SensorCatalogue, name: String, valueFactory: ValueFactory)
+ getReading(start: LocalTime, end: LocalTime): String
- getAveragePowerConsumption(readings: List<WValue>): String
- getReadingsInAPeriodOfTime(start LocalTime, end: LocalTime)
- void addReadingToList(instantValue: WValue, readings: List<WValue>): List<WValue>
- removeMeasurementUnit(reading: WValue): String
+ addReading(reading: WValue, time: LocalTime): boolean
+ String getName()
+ SensorFunctionality getSensorFunctionality()
}

class BinarySwitch {
- _sensorFunctionality: SensorFunctionality
- _name: String
- _binarySwitch: SwitchOnOffActuator
+ BinarySwitch(catalogue: SensorCatalogue, name: String, valueFactory: ValueFactory)
+ configureSensor(actuator: SwitchOnOffActuator): boolean
+ readStatus(): boolean
+ getName(): String
+ getSensorFunctionality(): SensorFunctionality
}

class DewPointSensor {
- _name: String
- _sensorFunctionality: SensorFunctionality
- _currentValue: Value
- _valueFactory: ValueFactory
+ DewPointSensor(catalogue: SensorCatalogue, name: String, valueFactory: ValueFactory)
+ getReading(): String
+ getName(): String
+ getMeasurementUnit(): String
+ getSensorFunctionality(): SensorFunctionality
}

class ElectricEnergyConsumptionSensor {
- _name: String
- _sensorFunctionality: SensorFunctionality
- _currentValue: Value
- _data: Map<LocalTime, WhValue>
+ ElectricEnergyConsumptionSensor(catalogue SensorCatalogue, name: String, valueFactory: ValueFactory)
- removeMeasurementUnit(reading: WhValue): String
- getReadingInAGivenTime(time: LocalTime): double
+ getReading(start: LocalTime, end: LocalTime): String
- getEnergyConsumptionOverAPeriod(startTime: LocalTime, endTime: LocalTime): String
+ addReading(reading: WhValue, time: LocalTime): boolean
+ getName(): String
+ getMeasurementUnit(): String
+ getSensorFunctionality(): SensorFunctionality
}

class HumiditySensor {
- _name: String
- _sensorFunctionality: SensorFunctionality
- _currentValue: Value
- _valueFactory: ValueFactory
+ HumiditySensor(catalogue: SensorCatalogue, name: String, valueFactory: ValueFactory)
+ getReading(): String
+ getName(): String
+ getMeasurementUnit(): String
+ getSensorFunctionality(): SensorFunctionality
}

class InstantPowerConsumptionSensor {
- _name: String
- _currentValue: Value
- _sensorFunctionality: SensorFunctionality
- _valueFactory: ValueFactory
+ InstantPowerConsumptionSensor(catalogue: SensorCatalogue, name: String, valueFactory: ValueFactory)
+ getReading(): String
+ getName(): String
+ getMeasurementUnit(valueFactory: ValueFactory): String
+ getSensorFunctionality(): SensorFunctionality
}

class ScaleSensor {
- _name: String
- _sensorFunctionality: SensorFunctionality
- _currentValue: Value
- _valueFactory: ValueFactory
+ ScaleSensor(catalogue: SensorCatalogue, name: String, valueFactory: ValueFactory)
+ getReading(): String
+ getName(): String
+ getMeasurementUnit(valueFactory: ValueFactory): String
+ getSensorFunctionality(): SensorFunctionality
}

class SolarIrradianceSensor {
- _name: String
- _sensorFunctionality: SensorFunctionality
- _currentValue: Value
- _valueFactory: ValueFactory
+ SolarIrradianceSensor(catalogue: SensorCatalogue, name: String, valueFactory: ValueFactory)
+ getReading(): String
+ getName(): String
+ getMeasurementUnit(valueFactory: ValueFactory): String
+ getSensorFunctionality(): SensorFunctionality
}

class SunriseSensor {
- _name: String
- _sensorFunctionality: SensorFunctionality
- _currentTime: LocalTime
+ SunriseSensor(catalogue: SensorCatalogue, name: String, valueFactory: ValueFactory)
+ getName(): String
+ getSensorFunctionality(): SensorFunctionality
+ calculateSunrise(localDate: LocalDate, latitude: double, longitude: double): LocalTime
+ getReading(): String
}

class SunsetSensor {
- _name: String
- _sensorFunctionality: SensorFunctionality
- _currentTime: LocalTime
+ SunsetSensor(catalogue: SensorCatalogue, name: String, valueFactory: ValueFactory)
+ getName(): String
+ getSensorFunctionality(): SensorFunctionality
+ calculateSunset(localDate: LocalDate, latitude: double, longitude: double): LocalTime
+ getReading(): String
}

class TemperatureSensor {
- _name: String
- _sensorFunctionality: SensorFunctionality
- _currentValue: Value
- _valueFactory: ValueFactory
+ TemperatureSensor(catalogue: SensorCatalogue, name: String, valueFactory: ValueFactory)
+ getReading(): String
+ setName(name: String): boolean
+ getName(): String
+ getMeasurementUnit(valueFactory: ValueFactory): String
+ getSensorFunctionality(): SensorFunctionality
}

class WindSensor {
- _name: String
- _sensorFunctionality: SensorFunctionality
- _currentValue: Value
- _valueFactory: ValueFactory
+ WindSensor(catalogue: SensorCatalogue, name: String, valueFactory: ValueFactory)
+ getName(): String
+ getMeasurementUnit(valueFactory: ValueFactory): String
+ getSensorFunctionality(): SensorFunctionality
+ getReading(): String
}

enum WindDirection {
    N,
    NE,
    E,
    SE,
    S,
    SW,
    W,
    NW
}

AveragePowerConsumptionSensor    ..^  Sensor: uses
DewPointSensor                   ..^  Sensor: uses
ElectricEnergyConsumptionSensor  ..^  Sensor: uses
HumiditySensor                   ..^  Sensor: uses
InstantPowerConsumptionSensor    ..^  Sensor: uses
BinarySwitch                     ..^  Sensor: uses
ScaleSensor                      ..^  Sensor: uses
SolarIrradianceSensor            ..^  Sensor: uses
SunriseSensor                    ..^  Sensor: uses
SunsetSensor                     ..^  Sensor: uses
TemperatureSensor                ..^  Sensor: uses
WindSensor                       ..^  Sensor: uses

interface Value {
+ toString(): String
+ setValue(String measured): boolean
+ getMeasurementUnit(): String
}

class CelsiusValue {
- _measurementUnit: String
- _currentValue: double
+ CelsiusValue()
+ toString(): String
+ setValue(measured: String): boolean
+ getMeasurementUnit(): String
}

class KmhCardinalValue {
- _speed: String
- _direction: WindDirection
- _measurementUnit: String
+ KmhCardinalValue()
+ getWindSpeed(): String
+ getWindDirection(): String
+ setValue(measured: String): boolean
+ boolean setDirection(WindDirection direction)
+ getMeasurementUnit(): String
+ toString(): String
}

class PercentageValue {
- _currentValue: int
- _measurementUnit: String
- isValidPercentage(int value): boolean
+ setValue(measured: String): boolean
+ getMeasurementUnit(): String
+ toString(): String
}

class WhValue {
- _currentValue: int
- _measurementUnit: String
+ WhValue()
- isValidEnergyConsumption(value: double): boolean
+ setValue(measured: String): boolean
+ getMeasurementUnit(): String
}

class Wm2Value {
- _currentValue: int
- _measurementUnit: String
+ Wm2Value()
+ toString(): String
+ setValue(measured: String): boolean
+ getMeasurementUnit(): String
}

class WValue {
- _currentValue: int
- _measurementUnit: String
+ WValue()
+ toString(): String
+ setValue(measured: String): boolean
+ getMeasurementUnit(): String
}

CelsiusValue                     ..^  Value: uses
KmhCardinalValue                 ..^  Value: uses
PercentageValue                  ..^  Value: uses
WValue                           ..^  Value: uses
WhValue                          ..^  Value: uses
Wm2Value                         ..^  Value: uses

AveragePowerConsumptionSensor "1" --> "*" WValue
DewPointSensor "1" --> "1" CelsiusValue
ElectricEnergyConsumptionSensor "1" --> "*" WhValue
HumiditySensor "1" --> "1" PercentageValue
InstantPowerConsumptionSensor "1" --> "1" WValue
ScaleSensor "1" --> "1" PercentageValue
SolarIrradianceSensor "1" --> "1" Wm2Value
TemperatureSensor "1" --> "1" CelsiusValue
WindSensor "1" --> "1" KmhCardinalValue

KmhCardinalValue                "1" *--> "1" WindDirection

@enduml