@startuml
'https://plantuml.com/class-diagram
package domain{
package house{
class House {
    - _location: Location
    - _locationFactory: LocationFactory
    - _roomFactory; RoomFactory

    + House(locationFactory: LocationFactory, roomFactory: RoomFactory)
    + configureLocation(street: String, doorNumber: String, \nzip: String, city: String,country: String, \nlatitude: double, longitude: double): Location
    + getLocation(): Location
    + addRoom(name: String, houseFloor: String, \nheight: double, width: double, \ndeviceFactory : DeviceFactory, \ndimensionsFactory: DimensionsFactory): boolean
    + roomExists(name: String): boolean
    + getRooms(): List<Room>
    + getRoom(name: String): Room
    + getDevicesByRoomAndFunctionality( devicesByFunctionality:\nDevicesByFunctionality): Map <String, List<DeviceRoomDTO>>
}
class DeviceByFunctionality {
    - _rooms: List<Room>
    - _sensorFunctionalities: SensorFunctionality[]
    - _devicesRoomNoFunc: List<DeviceRoomDTO>
    - _map: Map<String, List<DeviceRoomDTO>>
    + DevicesByFunctionality(List<Room> _rooms)
    + getGroupedResult(): Map<String, List<DeviceRoomDTO>>
    - devicesLoop(Room room, List<Device> devices, SensorFunctionality sensorFunctionality): void
    - sensorsLoop(Room room, Device device, List<Sensor> sensors, SensorFunctionality sensorFunctionality): void
    - addDevicesWithoutFunctionalities(): void
    }
}
package room{
class Room {
    - _name: String
    - _houseFloor: String
    - _dimensions: Dimensions
    - _devices: List<Device>
    - _deviceFactory: DeviceFactory
    - _dimensionsFactory: DimensionsFactory
    + Room(name: String, houseFloor: String, height: double, width: double, \ndeviceFactory: DeviceFactory, \ndimensionsFactory: DimensionsFactory): Room
    - validateArguments(name: String, houseFloor: String): boolean
    + getName(): String
    + getFloor(): String
    + getDimensions(): Dimensions
    + addDevice(name: String, model: String): boolean
    - deviceExists(name: String): boolean
    + getDevice(name: String): Device
    + getDevices(): List<Device>
    + toString(): String
}
}
package device{
class Device {
- _name : String;
- _deviceModel : String;
- _sensors : List<Sensor>;
- _actuators : List<Actuator>;
- _isActive : boolean
- _actuatorCatalogue : ActuatorCatalogue
- _sensorCatalogue : SensorCatalogue
+ Device (name : String, deviceModel : String) : Device
- validateArguments(name: String, deviceModel: String): boolean
+ switchDevice (isActive : boolean) : boolean
+ getName() : String
+ getIsActive() : boolean
+ getDeviceModel() : String
+ addSensor (name : String, sensorModel : String) : Sensor
+ getSensor (sensorModel : String) : Sensor
+ getActuator (actuatorModel : String) : Actuator
+ addActuator (strModel : String, name : String, \nactuatorCatalogue ActuatorCatalogue, valueFactory : ValueFactory) : Actuator
+ getActuator() : List<Actuator>
+ actuatorExists (name : String) : boolean
+ getActuatorFunctionalities() : List<ActuatorFunctionality>
}
}
package sensors{
interface Sensor {
    getName(): String
    getSensorFunctionality(): SensorFunctionality
}
}
}
package controller{
class Ctrl09 {
- _house: House
+ Ctrl09(house: House)
+ getDevicesByRoomAndFunctionality(): Map<String, List<DeviceRoomDTO>>
}
}
Ctrl09 "1" ..down> "1" House : "uses"
House "1" --down> "N" Room : "has"
Room "1" *-down- "0..*" Device
Device "1" *-down- "0..*" DeviceByFunctionality
DeviceByFunctionality "1" --down> "0..*" Sensor
DeviceByFunctionality "1" -down-> "0..*" Room

@enduml