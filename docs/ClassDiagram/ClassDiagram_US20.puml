@startuml
'https://plantuml.com/class-diagram

class House {
    - _location: Location
    - _locationFactory: LocationFactory
    - _roomFactory; RoomFactory
    - _repository: Repository
    + House(repository: Repository,\nlocationFactory: LocationFactory, roomFactory: RoomFactory)
    + configureLocation(street: String, doorNumber: String, \nzip: String, city: String,country: String, \nlatitude: double, longitude: double): Location
    + getLocation(): Location
    + addRoom(name: String, houseFloor: String, \nheight: double, width: double, \ndeviceFactory : DeviceFactory, \ndimensionsFactory: DimensionsFactory): boolean
    + roomExists(name: String): boolean
    + getRooms(): List<Room>
    + getRoom(name: String): Room
    + getDevicesByRoomAndFunctionality( devicesByFunctionality:\nDevicesByFunctionality): Map <String, List<DeviceRoomDTO>>
}

class Room {
    - _name: String
    - _houseFloor: String
    - _dimensions: Dimensions
    - _devices: List<Device>
    - _repository: Repository
    - _deviceFactory: DeviceFactory
    - _dimensionsFactory: DimensionsFactory
    + Room(name: String, houseFloor: String, height: double, width: double, \nrepository: Repository, deviceFactory: DeviceFactory, \ndimensionsFactory: DimensionsFactory): Room
    - validateArguments(name: String, houseFloor: String): boolean
    + getName(): String
    + getFloor(): String
    + getDimensions(): Dimensions
    + addDevice(name: String, model: String): boolean
    - deviceExists(name: String): boolean
    + getDevice(name: String): Device
    + getDevices(): List<Device>
    + toString(): String
}

class Device {
- _name : String;
- _deviceModel : String;
- _sensors : List<Sensor>;
- _actuators : List<Actuator>;
- _isActive : boolean
- _repository : Repository
- _actuatorCatalogue : ActuatorCatalogue
- _sensorCatalogue : SensorCatalogue
+ Device (name : String, deviceModel : String, repository : Repository) : Device
- validateArguments(name: String, deviceModel: String): boolean
+ switchDevice (isActive : boolean) : boolean
+ getName() : String
+ getIsActive() : boolean
+ getDeviceModel() : String
+ addSensor (name : String, sensorModel : String) : Sensor
+ getSensor (sensorModel : String) : Sensor
+ getActuator (actuatorModel : String) : Actuator
+ addActuator (strModel : String, name : String, \nactuatorCatalogue ActuatorCatalogue, valueFactory : ValueFactory) : Actuator
+ getActuator() : List<Actuator>
+ actuatorExists (name : String) : boolean
+ getActuatorFunctionalities() : List<ActuatorFunctionality>
}

class SensorCatalogue {
    - _catalogueSensors: List<String>
    + SensorCatalogue(config: Configuration)
    + SensorCatalogue(filename: String)
    + getSensors(): List<String>
    + getSensor(): Sensor

}

interface Sensor {
    getName(): String
    getSensorFunctionality(): SensorFunctionality
}

class SensorCatalogue{
    - _catalogueSensors: List<String>
    - _sensorFunctionalities: List<SensorFunctionality>
    + SensorCatalogue(config: Configuration)
    + SensorCatalogue(filename: String)
    - isValidConstructorArguments(Configuration config): boolean
    - isValidConstructorArguments(String filePathname): boolean
    + getSensorFunctionalities(): List<SensorFunctionality>
    + getSensor(String sensorModel, String sensorPath, String name, ValueFactory valueFactory): Sensor
}


class SunriseSensor {
    - _name: String
    - _sensorFunctionality: SensorFunctionality
    - _currentTime: LocalTime
    + SunriseSensor(name: String, sensorFunctionality: SensorFunctionality)
    + getName(): String
    + getSensorFunctionality(): SensorFunctionality
    + calculateSunrise(LocalDate localDate, double latitude, double longitude): LocalTime
    + getReading(): String
}

House "1" *-- "0..*" Room
Room "1" *-down- "0..*" Device
Device "1" *-down- "0..*" SunriseSensor
SunriseSensor -down-|> Sensor
SunriseSensor "1" o-left- SensorCatalogue

@enduml