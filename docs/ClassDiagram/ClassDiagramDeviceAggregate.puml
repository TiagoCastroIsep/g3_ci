@startuml
!theme toy

package ddd {
    interface ValueObject{
    }

    interface AggregateRoot {
    }
}

package valueObject{

class DeviceName<VO>{
- _name : String;
+ DeviceName (name : String)
+ toString() : String
+ equals (obj : Object) : boolean
}

class DeviceModel<VO>{
- _model : String;
+ DeviceModel (model : String)
+ toString() : String
+ equals (obj : Object) : boolean
}

class RoomName<VO>{
- _name : String;
+ RoomName (room : String)
+ toString() : String
+ equals (obj : Object) : boolean
}

DeviceName ..|> ValueObject
DeviceModel ..|> ValueObject
RoomName ..|> ValueObject

}

package device {

interface FactoryDevice {
+ createDevice (roomName RoomName, deviceName : DeviceName, deviceModel : DeviceModel) : Device
}

interface Repository {
+ save (entity : T) : T
+ findAll() : Iterable<T>
+ findsByName(name : DeviceName) : Optional<T>
+ containsByName(name : DeviceName) : boolean
}

class Device {
- _deviceName : DeviceName;
- _deviceModel : DeviceModel;
- _roomName: RoomName;
# Device (roomName RoomName, deviceName : DeviceName, deviceModel : DeviceModel)
+ identity() : DeviceName
+ equals (obj : Object)
+ sameAs (obj : Object)
+ toString() : String
}

class DeviceRepository {
- data : Map<DeviceName, Device>;
+ save (entity : Device) : Device
+ findAll() : Iterable<Device>
+ findsByName(name : DeviceName) : Optional<Device>
+ containsByName(name : DeviceName) : boolean
}

class DeviceFactoryImpl{
+ createDevice(roomName RoomName, deviceName : DeviceName, deviceModel : DeviceModel)
}

DeviceRepository ..|> Repository
Device ..down|> AggregateRoot
DeviceFactoryImpl ..|> FactoryDevice

}

@enduml