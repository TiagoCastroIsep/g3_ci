@startuml
'https://plantuml.com/class-diagram

interface Actuator {
 + getName(): String
 + getActuatorFunctionality(): ActuatorFunctionality
}

interface Value {
 + toString(): String
 + setValue(measured: String): boolean
 + getMeasurementUnit(): String
}

class BlindRollerActuator {
  - _name: String
  - _actuatorFunctionality: ActuatorFunctionality
  - _currentValue: Value
  - _valueFactory: ValueFactory
  + BlindRollerActuator(actuatorCatalogue, name, valueFactory)
  + assignCurrValue(valueFactory: ValueFactory): Value
  + getName(): String
  + getActuatorFunctionality(): ActuatorFunctionality
  + getMeasurementUnit(valueFactory: ValueFactory): String
  + getReading(): String
}

class RangeActuatorDecimal {
  - _name: String
  - _actuatorFunctionality: ActuatorFunctionality
  - _measurement: Value
  - _lowerLimit: double
  - _upperLimit: double
  - _precision: double
  + RangeActuatorDecimal(actuatorCatalogue, name, valueFactory)
  + configureActuator(name, lowerLimit, upperLimit, precision, valueFactory): boolean
  + getName(): String
  + getReading(): String
  + getActuatorFunctionality(): ActuatorFunctionality
  + setMeasurement(measured: String): boolean
  + getLowerLimit(): double
  + getUpperLimit(): double
  + getPrecision(): double
  + getMeasurementUnits(): String
}

class RangeActuatorInt {
  - _name: String
  - _actuatorFunctionality: ActuatorFunctionality
  - _measurement: Value
  - _lowerLimit: double
  - _upperLimit: double
  + RangeActuatorInt(actuatorCatalogue, name, valueFactory)
  + configureActuator(name, lowerLimit, upperLimit, valueFactory): boolean
  + getName(): String
  + getReading(): String
  + getActuatorFunctionality(): ActuatorFunctionality
  + getLowerLimit(): double
  + getUpperLimit(): double
  + setMeasurement(measured String): boolean
  + getMeasurementUnits(): String
}

class SwitchOnOffActuator {
  - _isOn: boolean
  - _name: String
  - _actuatorFunctionality: ActuatorFunctionality
  + SwitchOnOffActuator(actuatorCatalogue, name, valueFactory)
  + switchActuator(): boolean
  + isOn(): boolean
  + getName(): String
  + getActuatorFunctionality(): ActuatorFunctionality
  + getReading(): String
}

class PercentageValue {
  - _currentValue: int
  - _measurementUnit: String
  - isValidPercentage(value: int): boolean
  + setValue(measured: String): boolean
  + getMeasurementUnit(): String
  + toString(): String
}

class RangeActuatorFractionalValue {
  - _lowerLimit: double
  - _upperLimit: double
  - _measurement: double
  - _measurementUnit: String
  + RangeActuatorFractionalValue(lowerLimit: double, upperLimit: double)
  + toString(): String
  + setValue(measured: String): boolean
  + getMeasurementUnit(): String
}

class RangeActuatorIntValue {
  - _lowerLimit: int
  - _upperLimit: int
  - _measurement: int
  - _measurementUnit: String
  + RangeActuatorIntValue(lowerLimit: double, upperLimit: double)
  + setValue(measured: String): boolean
    + getMeasurementUnit(): String
}

Actuator -left..|> Value

BlindRollerActuator -up..|> Actuator: uses
RangeActuatorDecimal -up..|> Actuator: uses
RangeActuatorInt -up..|> Actuator: uses
SwitchOnOffActuator -up..|> Actuator: uses

PercentageValue -down..|> Value: uses
RangeActuatorFractionalValue -down..|> Value: uses
RangeActuatorIntValue -down..|> Value: uses

BlindRollerActuator "1" -down--> "1" PercentageValue
RangeActuatorDecimal "1" -down--> "1" RangeActuatorFractionalValue
RangeActuatorInt "1" -down--> "1" RangeActuatorIntValue


@enduml